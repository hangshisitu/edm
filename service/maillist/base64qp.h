/***********************************************************************************************************************
														本文件是关于base64码跟qp码的解码，编码的组件的集合。
														qp解码建议使用decode_qp
***********************************************************************************************************************/


#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <time.h>
#include <string.h>
#include <sys/types.h>
#include <unistd.h>

#ifndef _H_BaseQp

#define _H_BaseQp


#ifndef _H_IsHexChar
#define _H_IsHexChar
#define IsHexChar(c) ( ((c>='a' && c<='f' ) || (c>='A' && c<='F' ) || (c>='0' && c<='9' )) )
/***********************************************************************************************************************
功能：
	一个宏定义的函数，判断字符是否为16进制的数符
参数:
	c是要判断的字符
返回:
	如果是16进制的字符，结果非0，如果不是，结果是0
***********************************************************************************************************************/
#endif











int decode_qp_ext(const char* aIn, size_t aInLen, char* aOut,size_t aOutSize , size_t* aOutLen, char cEnd);
/***********************************************************************************************************************
功能：
	将aIn的字符进行qp解码。这个不识别软换行的。
参数:
	aIn：需要解码的存放的内存
	aInLen：需要解码的字符的长度
	aOut:解码后放在aOut内存中
	aOutSize：解码后存放的内存的大小，即aOut的大小
	aOutLen:解码后的长度
	cEnd：解码后最后加上的结束字符。一般是\0
返回:
	如果解码出错，返回-1。正常解码返回0
注意：
	aOut跟aIn可以相同，但是不能aOut在aIn的后面，如：aOut不能是aIn+8这样的。aOutSize不能大于aOut内存的大小
	aOutLen是不包括结束字符的长度，就是说aOut[aOutLen] = cEnd的。
	在解某些中文时会有bug
***********************************************************************************************************************/



int decode_qp_ext2(const char* aIn, size_t aInLen, char* aOut,size_t aOutSize , size_t* aOutLen, char cEnd);
/***********************************************************************************************************************
功能：
	将aIn的字符进行qp解码。这个识别软换行。
参数:
	aIn：需要解码的存放的内存
	aInLen：需要解码的字符的长度
	aOut:解码后放在aOut内存中
	aOutSize：解码后存放的内存的大小，即aOut的大小
	aOutLen:解码后的长度
	cEnd：解码后最后加上的结束字符。一般是\0
返回:
	如果解码出错，返回-1。正常解码返回0
注意：
	aOut跟aIn可以相同，但是不能aOut在aIn的后面，如：aOut不能是aIn+8这样的。aOutSize不能大于aOut内存的大小
	aOutLen是不包括结束字符的长度，就是说aOut[aOutLen] = cEnd的。
***********************************************************************************************************************/



int decode_qp(const char* aIn, size_t aInLen, char* aOut,size_t aOutSize , size_t* aOutLen);
/***********************************************************************************************************************
功能：
	将aIn的字符进行qp解码。这个不识别软换行。少了一个参数，所以最后固定是置为0的
参数:
	aIn：需要解码的存放的内存
	aInLen：需要解码的字符的长度
	aOut:解码后放在aOut内存中
	aOutSize：解码后存放的内存的大小，即aOut的大小
	aOutLen:解码后的长度
返回:
	如果解码出错，返回-1。正常解码返回0
注意：
	aOut跟aIn可以相同，但是不能aOut在aIn的后面，如：aOut不能是aIn+8这样的。aOutSize不能大于aOut内存的大小
	aOutLen是不包括结束字符的长度，就是说aOut[aOutLen] = \0的。
***********************************************************************************************************************/



int encode_base64_asm(const char* aIn, size_t aInLen, char* aOut,size_t aOutSize, size_t* aOutLen);
/***********************************************************************************************************************
功能：
	用汇编写的base64编码程序。（编码！！！不是解码）
参数:
	aIn：要编码的字符串
	aInLen:要编码的字符串的长度
	aOut:编码后放置的内存
	aOutSize:编码后放在的内存的大小
	aOutLen：编码后的长度
返回:
	如果内存块不存在或者长度为零，返回-1；如果aOutSize不够大，返回-2；成功返回0
注意：
	aOutSize应该大于((aInLen)/3)*4。
	aOut跟aIn不能一样。编码是变长的，不是变短的
	没有在末尾置零，需要自己置的
***********************************************************************************************************************/



int decode_base64(const char* aIn, size_t aInLen, char* aOut,size_t aOutSize, size_t* aOutLen);
/***********************************************************************************************************************
功能：
	base64解码。将末尾置零
参数:
	aIn：要解码的字符串
	aInLen:要解码的字符串的长度
	aOut:解码后放置的内存
	aOutSize:解码后放在的内存的大小
	aOutLen：解码后的长度	
返回:
	成功返回0	，失败返回-1
修改：
	将末尾置为\0，即加一行:aOut[outpos] = 0;
注意：
	解码，可以让aIn跟aOut相同
	要把aIn末尾的多余的\r跟\n这些去掉，就是说不能有多余的字符
***********************************************************************************************************************/



int decode_base64_asm(const char* aIn, size_t aInLen, char* aOut,size_t aOutSize, size_t* aOutLen);
/***********************************************************************************************************************
功能：
	汇编的base64解码。没有末尾置零
参数:
	aIn：要解码的字符串
	aInLen:要解码的字符串的长度
	aOut:解码后放置的内存
	aOutSize:解码后放在的内存的大小
	aOutLen：解码后的长度	
返回:
	如果内存块不存在或者长度为零，返回-1；如果aOutSize不够大，返回-2；成功返回0
注意：
	解码，可以让aIn跟aOut相同
	要把aIn末尾的多余的\r跟\n这些去掉，就是说不能有多余的字符
***********************************************************************************************************************/



int encode_base64(const char* aIn, size_t aInLen, char* aOut,size_t aOutSize, size_t* aOutLen);
/***********************************************************************************************************************
功能：
	base64编码，末尾置零的。
参数:
	aIn：要编码的字符串
	aInLen:要编码的字符串的长度
	aOut:编码后放置的内存
	aOutSize:编码后放在的内存的大小
	aOutLen：编码后的长度
返回:
	成功返回0，失败返回-1
注意：
	编码，aIn跟aOut不能相同。aOutSize要够大
***********************************************************************************************************************/



int decode_qp_asm(const char* aIn, size_t aInLen, char* aOut,size_t aOutSize, size_t* aOutLen,char cEnd);
/***********************************************************************************************************************
功能：
	汇编的qp解码，将末尾置为cEnd
参数:
	aIn：要解码的字符串
	aInLen:要解码的字符串的长度
	aOut:解码后放置的内存
	aOutSize:解码后放在的内存的大小
	aOutLen：解码后的长度
	cEnd：结束字符
返回:
	成功返回0，失败返回-1
注意：
	解码，aIn跟aOut可以相同。
	在解码中文的时候会出现bug
***********************************************************************************************************************/



int encode_qp_asm(const char* aIn, size_t aInLen, char* aOut,size_t aOutSize, size_t* aOutLen); 
/***********************************************************************************************************************
功能：
	汇编的qp编码
参数:
	aIn：要编码的字符串
	aInLen:要编码的字符串的长度
	aOut:编码后放置的内存
	aOutSize:编码后放在的内存的大小
	aOutLen：编码后的长度
返回:
	成功返回0，失败返回-1
注意：
	编码，aIn跟aOut不能相同。aOutSize要够大，没有置零
	好像有bug，会codedump
***********************************************************************************************************************/



int encode_qp(const char* aIn, size_t aInLen, char* aOut,size_t aOutSize, size_t* aOutLen,int *nPreLineLeft);
/***********************************************************************************************************************
功能：
	qp编码
参数:
	aIn：要编码的字符串
	aInLen:要编码的字符串的长度
	aOut:编码后放置的内存
	aOutSize:编码后放在的内存的大小
	aOutLen：编码后的长度
	aPreLineLeft:当一行大于76个字符时，该函数会加个软换行。该数是放已经在一行里放了多少个字符了
返回:
	成功返回0，失败返回-1
注意：
	编码，aIn跟aOut不能相同。aOutSize要够大，没有置零
***********************************************************************************************************************/




void InsertBase64LineBreak(char *sLine, int szLine,char *sOut, int szOut,int *pnPreLineLeft,int *pnLen);
/***********************************************************************************************************************
功能：
	每76个字符，会将编码出来的base64码加个换行"\r\n"
参数:
	sLine：需要插入换行的base64码
	szLine：sLine的大小
	sOut:插入后存放的内存
	szOut:sOut的大小
	pnPreLineLeft：最后一行里面有几个字符
	pnLen:插入后的大小
返回:
	没有返回
***********************************************************************************************************************/




#endif
